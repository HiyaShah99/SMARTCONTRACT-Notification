echo "# SMARTCONTRACT-Notification" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/HiyaShah99/SMARTCONTRACT-Notification.git
git push -u origin main
  // SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
interface IPUSHCommInterface{
    function sendNotification(address _channel, address _recipient, bytes calldata _identity) external;
}


contract MyToken is ERC721, Ownable {
    constructor(address initialOwner)
        ERC721("MyToken", "MTK")
        Ownable(initialOwner)
    {}

    function safeMint(address to, uint256 tokenId) public onlyOwner {
        _safeMint(to, tokenId);
        IPUSHCommInterface(0x2b9bE9259a4F5Ba6344c1b1c07911539642a2D33).sendNotification(
    0xb07eFB6a0B804b481B2F7F39dd19fF4c4b43EF47, // from channel - recommended to set channel via dApp and put it's value -> then once contract is deployed, go back and add the contract address as delegate for your channel
    0xb07eFB6a0B804b481B2F7F39dd19fF4c4b43EF47, // to recipient, put address(this) in case you want Broadcast or Subset. For Targetted put the address to which you want to send
    bytes(
        string(
            // We are passing identity here: https://push.org/docs/notifications/notification-standards/notification-standards-advance/#notification-identity
            abi.encodePacked(
                "0", // this represents minimal identity, learn more: https://push.org/docs/notifications/notification-standards/notification-standards-advance/#notification-identity
                "+", // segregator
                "3", // define notification type:  https://push.org/docs/notifications/build/types-of-notification (1, 3 or 4) = (Broadcast, targetted or subset)
                "+", // segregator
                "Title", // this is notificaiton title
                "+", // segregator
                "Body" // notification body
            )
        )
    )
);
    }
}
    
